pipeline {
    agent any

    environment {
        IMAGE_NAME = "pz41-app"
        IMAGE_TAG = "latest"
        K8S_DEPLOYMENT_NAME = "pz41-app-deployment"
        K8S_SERVICE_NAME = "pz41-app-service"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Fetching code from repository...'
                checkout scm
            }
        }

        stage('Build & Package') {
            steps {
                echo 'üîß Compiling and packaging the project...'
                sh 'chmod +x ./mvnw'
                sh './mvnw clean package -DskipTests'
            }
        }

        stage('Test') {
            steps {
                echo 'üß™ Running tests...'
                sh './mvnw test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                echo 'üóÇ Archiving the JAR file...'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

        // --- –ï—Ç–∞–ø –∑–±—ñ—Ä–∫–∏ –æ–±—Ä–∞–∑—É (–°–ü–†–û–©–ï–ù–û) ---
// –í Jenkinsfile, –ø–µ—Ä–µ–¥ —Ç–∏–º —è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ docker build
stage('Build Docker Image') {
    steps {
        script {
            echo "‚öôÔ∏è Configuring Docker for Minikube demon..."
            // –¶—è –∫–æ–º–∞–Ω–¥–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Docker –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –æ–±–æ–ª–æ–Ω–∫–∏
            // —Ç–∞–∫, —â–æ–± docker CLI –∑–≤–µ—Ä—Ç–∞–≤—Å—è –¥–æ Docker-–¥–µ–º–æ–Ω–∞ Minikube.
            // –í–æ–Ω–∞ –≤–∏–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏.
            def dockerEnv = sh(script: 'minikube -p minikube docker-env', returnStdout: true).trim()
            // Jenkinsfile –Ω–µ –º–∞—î 'eval'. –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ, –º–∏ –º–æ–∂–µ–º–æ –ø–∞—Ä—Å–∏—Ç–∏ –≤–∏–≤—ñ–¥
            // —ñ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –ø—Ä–æ–≥—Ä–∞–º–Ω–æ.
            // –í–∏–≤—ñ–¥ minikube docker-env –≤–∏–≥–ª—è–¥–∞—î —è–∫:
            // export DOCKER_TLS_VERIFY="1"
            // export DOCKER_HOST="tcp://192.168.49.2:2376"
            // export DOCKER_CERT_PATH="/home/jenkins/.minikube/certs"
            // export DOCKER_CONTAINERD_UI_TCP_ADDR=""
            // # To point your shell to minikube's docker-daemon, run:
            // # eval $(minikube -p minikube docker-env)

            // –ü–∞—Ä—Å–∏–º–æ –≤–∏–≤—ñ–¥ —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É.
            dockerEnv.split('\n').each { line ->
                if (line.startsWith('export ')) {
                    def parts = line.substring('export '.length()).split('=', 2)
                    if (parts.length == 2) {
                        env."${parts[0].trim()}" = parts[1].trim().replace("\"", "")
                    }
                }
            }
            echo "‚úÖ Docker environment configured."

            echo "üê≥ Building Docker image ${IMAGE_NAME}:${IMAGE_TAG}..."
            // –¢–µ–ø–µ—Ä docker build –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–µ–º–æ–Ω Minikube
            sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
            echo "‚úÖ Docker image ${IMAGE_NAME}:${IMAGE_TAG} built successfully."
        }
    }
}

        // --- –ï—Ç–∞–ø —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è (–¢–†–û–•–ò –ó–ú–Ü–ù–ï–ù–û) ---
        stage('Deploy to Minikube') {
            steps {
                script {
                    echo "üöÄ Deploying to Minikube..."
                    try {
                        // –í–∞–∂–ª–∏–≤–æ: –∫–æ–º–∞–Ω–¥–∞ kubectl, –≤–∏–∫–æ–Ω–∞–Ω–∞ –∑ Jenkins, –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏,
                        // –æ—Å–∫—ñ–ª—å–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è kubectl –∑–∞–∑–≤–∏—á–∞–π –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É —Ñ–∞–π–ª—ñ
                        // (~/.kube/config), —è–∫–∏–π –º–æ–∂–µ –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π, –∞–±–æ Jenkins
                        // –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –Ω–∞ —Ä–æ–±–æ—Ç—É –∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–º.

                        echo "üìù Applying Kubernetes manifests..."
                        sh 'kubectl apply -f k8s/deployment.yaml'
                        sh 'kubectl apply -f k8s/service.yaml'

                        echo "‚ôªÔ∏è Triggering a rollout restart to apply the new image..."
                        // –¶–µ –Ω–∞–¥—ñ–π–Ω–∏–π —Å–ø–æ—Å—ñ–± –∑–º—É—Å–∏—Ç–∏ Kubernetes –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–¥–∏,
                        // –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ç–µ–≥ 'latest' —ñ imagePullPolicy: Never.
                        sh "kubectl rollout restart deployment/${K8S_DEPLOYMENT_NAME} --namespace=default"

                        echo "‚è≥ Waiting for deployment rollout to complete..."
                        timeout(time: 5, unit: 'MINUTES') {
                            sh "kubectl rollout status deployment/${K8S_DEPLOYMENT_NAME} --namespace=default --watch=true"
                        }

                        echo "‚úÖ Application deployed successfully to Minikube."

                        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è URL —Å–µ—Ä–≤—ñ—Å—É
                        echo "üîó Service URL:"
                        sh "minikube service ${K8S_SERVICE_NAME} --url"

                    } catch (e) {
                        echo "‚ùå Failed to deploy to Minikube: ${e.getMessage()}"
                        error "Minikube deployment failed"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ CI/CD Pipeline successfully completed! Application is deployed.'
        }
        failure {
            echo 'üö® CI/CD Pipeline failed! Check above logs for details.'
        }
    }
}