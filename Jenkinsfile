pipeline {
    agent any

    environment {
        IMAGE_NAME = "pz41-app"
        IMAGE_TAG = "latest"
        K8S_DEPLOYMENT_NAME = "pz41-app-deployment"
        K8S_SERVICE_NAME = "pz41-app-service"
        MINIKUBE_HOME = "/home/jenkins"

        // Proxy variables remain
        HTTP_PROXY = "http://http.docker.internal:3128"
        HTTPS_PROXY = "http://http.docker.internal:3128"
        NO_PROXY = "hubproxy.docker.internal,127.0.0.1,localhost,192.168.49.2"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Fetching code from repository...'
                checkout scm
            }
        }

        stage('Build & Package') {
            steps {
                echo 'üîß Compiling and packaging the project...'
                sh 'chmod +x ./mvnw'
                sh './mvnw clean package -DskipTests'
            }
        }

        stage('Test') {
            steps {
                echo 'üß™ Running tests...'
                sh './mvnw test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                echo 'üóÇ Archiving the JAR file...'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

        // !!! –í–ò–î–ê–õ–ò–¢–ò –¶–Æ –°–¢–ê–î–Ü–Æ !!!
        // stage('Install Minikube Tools') {
        //     steps {
        //         script {
        //             echo "Installing minikube and kubectl inside the agent..."
        //             sh 'curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && sudo install minikube-linux-amd64 /usr/local/bin/minikube'
        //             sh 'curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl'
        //         }
        //     }
        // }


        stage('Build Docker Image') {
            steps {
                script {
                    echo "‚öôÔ∏è Building Docker image ${IMAGE_NAME}:${IMAGE_TAG} directly into Minikube's Docker daemon using minikube image build..."
                    // –ö—Ä–∞–ø–∫–∞ –≤ –∫—ñ–Ω—Ü—ñ '.' –æ–∑–Ω–∞—á–∞—î, —â–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–±—ñ—Ä–∫–∏ Dockerfile –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–∑—ñ.
                    sh "minikube -p minikube image build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                    echo "‚úÖ Docker image ${IMAGE_NAME}:${IMAGE_TAG} built successfully in Minikube."
                }
            }
        }

stage('Deploy to Minikube') {
            steps {
                script {
                    echo "üöÄ Deploying to Minikube..."
                    try {
                        def minikubeInternalIp = sh(script: 'minikube -p minikube ip', returnStdout: true).trim()
                        echo "    - Minikube Internal IP: ${minikubeInternalIp}"

                        env.KUBECONFIG = "/home/jenkins/.kube/config"
                        echo "    - Setting KUBECONFIG=${env.KUBECONFIG}"

                        // –î–ª—è kubectl, —è–∫–∏–π –ø—Ä–∞—Ü—é—î –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ Jenkins –∞–≥–µ–Ω—Ç–∞,
                        // KUBECONFIG –≤–∂–µ –ø–æ–≤–∏–Ω–µ–Ω –≤–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ñ–∞–π–ª–∏,
                        // —ñ host.docker.internal –±—É–¥–µ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ API Minikube –Ω–∞ —Ö–æ—Å—Ç—ñ.
                        // –í—Å—ñ —Ü—ñ kubectl config set-cluster/credentials/certificate-authority
                        // –ø–æ–≤–∏–Ω–Ω—ñ –±—É–ª–∏ –±—É—Ç–∏ –∑—Ä–æ–±–ª–µ–Ω—ñ minikube start –Ω–∞ —Ö–æ—Å—Ç—ñ.
                        // –û–¥–Ω–∞–∫, –º–∏ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –ø–µ—Ä–µ–Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –π–æ–≥–æ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Jenkins –∞–≥–µ–Ω—Ç–∞.
                        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω—É IP –Ω–∞ host.docker.internal –¥–ª—è KUBECONFIG.
                        // !–í–ê–ñ–õ–ò–í–û! –í –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ä—è–¥–∫—É –º–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –¥–æ–¥–∞—î–º–æ --insecure-skip-tls-verify
                        // –¥–æ `kubectl config view` —â–æ–± –≤—ñ–Ω –º—ñ–≥ –≤–∑–∞–≥–∞–ª—ñ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ config.
                        def minikubeApiServerUrl = sh(script: "KUBECONFIG=${env.KUBECONFIG} kubectl config view --minify --output jsonpath='{.clusters[?(@.name==\"minikube\")].cluster.server}' --insecure-skip-tls-verify", returnStdout: true).trim()
                        echo "    - Minikube API Server URL (from host's kubeconfig): ${minikubeApiServerUrl}"

                        def minikubeApiServerPort = (minikubeApiServerUrl =~ /:(\d+)$/)[0][1]
                        echo "    - Minikube API Server Port: ${minikubeApiServerPort}"

                        // –¢—É—Ç —Ç–∞–∫–æ–∂ –¥–æ–¥–∞—î–º–æ --insecure-skip-tls-verify
                        sh "kubectl config set-cluster minikube --server=https://host.docker.internal:${minikubeApiServerPort} --kubeconfig=${env.KUBECONFIG} --insecure-skip-tls-verify"
                        sh "kubectl config set-credentials minikube --client-certificate=/home/jenkins/.minikube/profiles/minikube/client.crt --client-key=/home/jenkins/.minikube/profiles/minikube/client.key --embed-certs=true --kubeconfig=${env.KUBECONFIG}"
                        // –í CA –º–∏ –Ω–µ –¥–æ–¥–∞—î–º–æ --insecure-skip-tls-verify, –±–æ —Ü–µ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç, —è–∫–∏–π –º–∏ –¥–æ–≤—ñ—Ä—è—î–º–æ.
                        sh "kubectl config set-cluster minikube --certificate-authority=/home/jenkins/.minikube/ca.crt --embed-certs=true --kubeconfig=${env.KUBECONFIG}"


                        echo "    - Verifying kubeconfig setup (with --insecure-skip-tls-verify)..."
                        // –î–æ–¥–∞—î–º–æ --insecure-skip-tls-verify –¥–ª—è –≤—Å—ñ—Ö –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö kubectl –∫–æ–º–∞–Ω–¥
                        sh "kubectl config current-context --kubeconfig=${env.KUBECONFIG} --insecure-skip-tls-verify"
                        sh "kubectl config get-contexts --kubeconfig=${env.KUBECONFIG} --insecure-skip-tls-verify"

                        echo "üìù Applying Kubernetes manifests..."
                        sh "kubectl apply -f k8s/deployment.yaml --kubeconfig=${env.KUBECONFIG} --validate=false --insecure-skip-tls-verify" // –î–æ–¥–∞—î–º–æ --validate=false —Ç–∞–∫–æ–∂, —è–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤ –ø–æ–º–∏–ª—Ü—ñ
                        sh "kubectl apply -f k8s/service.yaml --kubeconfig=${env.KUBECONFIG} --validate=false --insecure-skip-tls-verify"

                        echo "‚ôªÔ∏è Triggering a rollout restart to apply the new image..."
                        sh "kubectl rollout restart deployment/${K8S_DEPLOYMENT_NAME} --namespace=default --kubeconfig=${env.KUBECONFIG} --insecure-skip-tls-verify"

                        echo "‚è≥ Waiting for deployment rollout to complete..."
                        timeout(time: 5, unit: 'MINUTES') {
                            sh "kubectl rollout status deployment/${K8S_DEPLOYMENT_NAME} --namespace=default --watch=true --kubeconfig=${env.KUBECONFIG} --insecure-skip-tls-verify"
                        }

                        echo "‚úÖ Application deployed successfully to Minikube."
                        echo "üîó Service URL:"
                        // minikube service --url –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î --kubeconfig, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω —Å–∞–º –∑–Ω–∞—î, –¥–µ –∑–Ω–∞–π—Ç–∏ Minikube.
                        sh "minikube service ${K8S_SERVICE_NAME} --url"

                    } } catch (e) {
                                              echo "‚ùå Failed to deploy to Minikube: ${e.getMessage()}"

                                              echo "--- DIAGNOSTIC INFORMATION ---"
                                              echo "Retrieving deployment status:"
                                              sh "kubectl describe deployment ${K8S_DEPLOYMENT_NAME} --namespace=default --kubeconfig=${env.KUBECONFIG} --insecure-skip-tls-verify || true" // <-- –î–û–î–ê–ù–û
                                              echo "Retrieving pod statuses:"
                                              sh "kubectl get pods -l app=${IMAGE_NAME} --namespace=default -o wide --kubeconfig=${env.KUBECONFIG} --insecure-skip-tls-verify || true" // <-- –î–û–î–ê–ù–û

                                              echo "Retrieving logs from potentially problematic pods (adjust selector if needed):"
                      def podNames = sh(script: "kubectl get pods -l app=${IMAGE_NAME} --namespace=default -o jsonpath='{.items[*].metadata.name}' --kubeconfig=${env.KUBECONFIG} --insecure-skip-tls-verify || true", returnStdout: true).trim()
                      if (podNames) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∑–º—ñ–Ω–Ω–∞ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è
                          podNames.split(' ').each { podName ->
                              if (podName) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –æ–∫—Ä–µ–º–∏–π –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
                                  echo "--- Logs for pod: ${podName} ---"
                                  sh "kubectl logs ${podName} --namespace=default --kubeconfig=${env.KUBECONFIG} --insecure-skip-tls-verify || true"
                                  sh "kubectl describe pod ${podName} --namespace=default --kubeconfig=${env.KUBECONFIG} --insecure-skip-tls-verify || true"
                              }
                          }
                      } else {
                          echo "No pods found with label app=${IMAGE_NAME} for logging."
                      }
        }}

    post {
        success {
            echo 'üéâ CI/CD Pipeline successfully completed! Application is deployed.'
        }
        failure {
            echo 'üö® CI/CD Pipeline failed! Check above logs for details.'
        }
    }
}