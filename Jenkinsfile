pipeline {
    agent any

    environment {
        IMAGE_NAME = "pz41-app"
        IMAGE_TAG = "latest"
        K8S_DEPLOYMENT_NAME = "pz41-app-deployment"
        K8S_SERVICE_NAME = "pz41-app-service"
        // –í–ê–ñ–õ–ò–í–û: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ü—é –∑–º—ñ–Ω–Ω—É. –í–æ–Ω–∞ –≤–∫–∞–∑—É—î minikube –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ
        // –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –¥–µ —à—É–∫–∞—Ç–∏ —Å–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏.
        MINIKUBE_HOME = '/home/jenkins'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Fetching code from repository...'
                checkout scm
            }
        }

        stage('Build & Package') {
            steps {
                echo 'üîß Compiling and packaging the project...'
                sh 'chmod +x ./mvnw'
                sh './mvnw clean package -DskipTests'
            }
        }

        stage('Test') {
            steps {
                echo 'üß™ Running tests...'
                sh './mvnw test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                echo 'üóÇ Archiving the JAR file...'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

        // --- –§–Ü–ù–ê–õ–¨–ù–ê –í–ï–†–°–Ü–Ø –ï–¢–ê–ü–Ü–í CD ---

        stage('Build Docker Image into Minikube') {
            steps {
                script {
                    echo "üéØ Getting Minikube's Docker environment..."
                    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥:
                    // 1. –û—Ç—Ä–∏–º—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —è–∫ —Ä—è–¥–æ–∫.
                    // 2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'withEnv' –¥–ª—è —ó—Ö –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.
                    def dockerEnv = sh(script: "minikube -p minikube docker-env", returnStdout: true).trim()

                    withEnv(["${dockerEnv}"]) {
                        // –£—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ü—å–æ–≥–æ –±–ª–æ–∫—É —Ç–µ–ø–µ—Ä –±—É–¥—É—Ç—å –±–∞—á–∏—Ç–∏ Docker-–¥–µ–º–æ–Ω Minikube.
                        echo "‚öôÔ∏è Building Docker image ${IMAGE_NAME}:${IMAGE_TAG}..."
                        sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."

                        echo "‚úÖ Docker image is now available inside Minikube. Verifying..."
                        sh "docker images | grep ${IMAGE_NAME}"
                    }
                }
            }
        }

              stage('Deploy to Minikube') {
                  steps {
                      script {
                          echo "üöÄ Deploying to Minikube..."

                          // 1. –î–∏–Ω–∞–º—ñ—á–Ω–æ –æ—Ç—Ä–∏–º—É—î–º–æ IP-–∞–¥—Ä–µ—Å—É Minikube.
                          def minikubeIp = sh(script: "minikube ip", returnStdout: true).trim()
                          echo "Minikube IP detected: ${minikubeIp}"

                          // 2. –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ NO_PROXY, —â–æ–± –≤–∏–∫–ª—é—á–∏—Ç–∏ —Ç—Ä–∞—Ñ—ñ–∫ –¥–æ Minikube –∑ –ø—Ä–æ–∫—Å—ñ.
                          // –î–æ–¥–∞—î–º–æ IP Minikube —Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –¥–æ–º–µ–Ω–∏ Kubernetes.
                          def noProxy = "localhost,127.0.0.1,${minikubeIp},kubernetes.default.svc,kubernetes.default,.svc,.cluster.local"

                          // 3. –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ kubectl –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –±–ª–æ–∫—É withEnv –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º NO_PROXY.
                          withEnv(["NO_PROXY=${noProxy}", "no_proxy=${noProxy}"]) {
                              echo "üìù Applying Kubernetes manifests with NO_PROXY='${noProxy}'"
                              sh 'kubectl apply -f k8s/deployment.yaml'
                              sh 'kubectl apply -f k8s/service.yaml'

                              echo "‚ôªÔ∏è Triggering a rollout restart to ensure the latest image is used..."
                              sh "kubectl rollout restart deployment/${K8S_DEPLOYMENT_NAME}"

                              echo "‚è≥ Waiting for deployment to complete..."
                              timeout(time: 5, unit: 'MINUTES') {
                                  sh "kubectl rollout status deployment/${K8S_DEPLOYMENT_NAME}"
                              }

                              echo "‚úÖ Application deployed successfully to Minikube."
                          }

                          // –ö–æ–º–∞–Ω–¥—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è URL –º–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –ø–æ–∑–∞ –±–ª–æ–∫–æ–º withEnv
                          echo "üîó Getting service URL..."
                          sh "minikube service ${K8S_SERVICE_NAME} --url"
                      }
                  }
              }
          }

    post {
        success {
            echo 'üéâ CI/CD Pipeline successfully completed! Application is deployed.'
        }
        failure {
            echo 'üö® CI/CD Pipeline failed! Check above logs for details.'
        }
    }
}