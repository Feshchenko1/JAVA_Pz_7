pipeline {
    agent any
    environment {
        IMAGE_NAME = "pz41-app"
        IMAGE_TAG = "latest"
        K8S_DEPLOYMENT_NAME = "pz41-app-deployment"
        K8S_SERVICE_NAME = "pz41-app-service"
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-credentials' // –ó–∞–¥–∞–π —Å–≤—ñ–π ID –∫—Ä–µ–¥–µ–Ω—à–∞–ª—ñ–≤ –¥–ª—è DockerHub —Ç—É—Ç
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Fetching code from repository...'
                checkout scm
                echo '‚úÖ Code checkout completed.'
            }
            post {
                failure {
                    echo '‚ùå Checkout failed! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ Git.'
                }
            }
        }

        stage('Build') {
            steps {
                echo 'üîß Building the project (compile + package)...'
                sh 'chmod +x ./mvnw'
                echo 'üì¶ Packaging the application...'
                sh './mvnw clean package -DskipTests'
            }
            post {
                success {
                    echo '‚úÖ Build and packaging successful.'
                }
                failure {
                    echo '‚ùå Build failed! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥ –∑–±—ñ—Ä–∫–∏ Maven.'
                }
                unstable {
                    echo '‚ö†Ô∏è Build completed –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ Maven.'
                }
            }
        }

        stage('Test') {
            steps {
                echo 'üß™ Running tests...'
                sh './mvnw test'
            }
            post {
                always {
                    echo 'üìÅ Archiving JUnit test results...'
                    junit 'target/surefire-reports/*.xml'
                }
                success {
                    echo '‚úÖ Tests passed successfully.'
                }
                failure {
                    echo '‚ùå –¢–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.'
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                echo 'üóÇ Archiving the JAR file...'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                            if (!fileExists('Dockerfile')) {
                                error "‚ùå Dockerfile –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–æ–±–æ—á—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó!"
                            }
                            echo 'üìã Dockerfile –∑–Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ...'

                    echo 'üìã –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–º—ñ—Å—Ç —Ä–æ–±–æ—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó:'
                    sh 'ls -la $WORKSPACE'
                    echo 'üìã –í–∏–≤—ñ–¥ Dockerfile:'
                    sh 'cat $WORKSPACE/Dockerfile'
                    echo 'üìã –í–º—ñ—Å—Ç –ø–∞–ø–∫–∏ target:'
                    sh 'ls -la $WORKSPACE/target'

                    echo "üê≥ Building Docker image ${IMAGE_NAME}:${IMAGE_TAG}..."
                                try {
                                    sh 'docker info'
                                } catch (e) {
                                    error "‚ùå Docker daemon –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Jenkins –∞–≥–µ–Ω—Ç–∞."
                                }
                    try {
                        docker.build("${IMAGE_NAME}:${IMAGE_TAG}", ".")
                        echo "‚úÖ Docker image ${IMAGE_NAME}:${IMAGE_TAG} built successfully."

                    } catch (e) {
                        echo "‚ùå Failed to build Docker image: ${e.getMessage()}"
                        error "Docker image build failed"
                    }

                }
            }
        }

        stage('Push Docker Image') {
            when {
                expression { return env.IMAGE_TAG != 'latest' }
            }
            steps {
                script {
                    echo "üöÄ Pushing Docker image ${IMAGE_NAME}:${IMAGE_TAG} to DockerHub..."
                    try {
                        docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS_ID) {
                            docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                        }
                        echo "‚úÖ Docker image pushed successfully."
                    } catch (e) {
                        echo "‚ùå Failed to push Docker image: ${e.getMessage()}"
                        error "Docker push failed"
                    }
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                script {
                 def kubectlVersion = sh(script: "kubectl version --client --short", returnStdout: true).trim()
                            echo "‚ÑπÔ∏è Kubectl version: ${kubectlVersion}"

                            def nodes = sh(script: "kubectl get nodes --no-headers | wc -l", returnStdout: true).trim()
                            if (nodes == '0') {
                                error "‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –Ω–æ–¥ —É –∫–ª–∞—Å—Ç–µ—Ä—ñ Kubernetes!"
                            }
                    echo "üì¶ Deploying to Minikube..."
                    try {
                        if (env.IMAGE_TAG == "latest") {
                            echo "‚ôªÔ∏è Rolling restart of deployment ${K8S_DEPLOYMENT_NAME}..."
                            sh "kubectl rollout restart deployment/${K8S_DEPLOYMENT_NAME} --namespace=default"
                            sleep 10
                        } else {
                            echo "üîÑ Updating deployment image to ${IMAGE_NAME}:${IMAGE_TAG}..."
                            sh "kubectl set image deployment/${K8S_DEPLOYMENT_NAME} ${K8S_DEPLOYMENT_NAME}=${IMAGE_NAME}:${IMAGE_TAG} --namespace=default --record"
                        }

                        echo "üìù Applying Kubernetes manifests..."
                        sh 'kubectl apply -f k8s/deployment.yaml'
                        sh 'kubectl apply -f k8s/service.yaml'

                        echo "‚è≥ Waiting for deployment rollout to complete..."
                        timeout(time: 5, unit: 'MINUTES') {
                            sh "kubectl rollout status deployment/${K8S_DEPLOYMENT_NAME} --namespace=default --watch=true"
                        }

                        echo "‚úÖ Application deployed successfully to Minikube."
                    } catch (e) {
                        echo "‚ùå Failed to deploy to Minikube: ${e.getMessage()}"
                        error "Minikube deployment failed"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ CI/CD Pipeline successfully completed! Application is deployed.'
        }
        failure {
            echo 'üö® CI/CD Pipeline failed! Check above logs for details.'
        }
        always {
            echo 'üîö Pipeline finished.'
        }
    }
}
