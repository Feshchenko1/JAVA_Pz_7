pipeline {
    agent any

    environment {
        IMAGE_NAME = "pz41-app"
        IMAGE_TAG = "latest"
        K8S_DEPLOYMENT_NAME = "pz41-app-deployment"
        K8S_SERVICE_NAME = "pz41-app-service"
        // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –∑–º—ñ–Ω–Ω—ñ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–ª—É—Ç–∞–Ω–∏–Ω–∏
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Fetching code from repository...'
                checkout scm
            }
        }

        stage('Build & Package') {
            steps {
                echo 'üîß Compiling and packaging the project...'
                sh 'chmod +x ./mvnw'
                // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏ —Ç—É—Ç, –±–æ –¥–ª—è –Ω–∏—Ö —î –æ–∫—Ä–µ–º–∏–π –µ—Ç–∞–ø
                sh './mvnw clean package -DskipTests'
            }
        }

        stage('Test') {
            steps {
                echo 'üß™ Running tests...'
                sh './mvnw test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                echo 'üóÇ Archiving the JAR file...'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

        // --- –í–ò–ü–†–ê–í–õ–ï–ù–Ü –ï–¢–ê–ü–ò CD ---

        stage('Build Docker Image into Minikube') {
            steps {
                script {
                    echo "üéØ Pointing Docker CLI to Minikube's Docker daemon..."
                    // –¶—è –∫–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω—É—î 'docker build' –£–°–ï–†–ï–î–ò–ù–Ü –∫–æ–Ω—Ç–µ–∫—Å—Ç—É Minikube.
                    // –¶–µ –Ω–∞–π–Ω–∞–¥—ñ–π–Ω—ñ—à–∏–π —Å–ø–æ—Å—ñ–± –∑—Ä–æ–±–∏—Ç–∏ –æ–±—Ä–∞–∑ –≤–∏–¥–∏–º–∏–º –¥–ª—è Kubernetes.
                    sh '''
                        eval $(minikube -p minikube docker-env) && \
                        echo "‚öôÔ∏è Building Docker image ${IMAGE_NAME}:${IMAGE_TAG}..." && \
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                    '''
                    echo "‚úÖ Docker image is now available inside Minikube."
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                script {
                    echo "üöÄ Deploying to Minikube..."
                    // –ó–∞–≤–¥—è–∫–∏ –∑–º–æ–Ω—Ç–æ–≤–∞–Ω–æ–º—É /home/jenkins/.kube, kubectl –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
                    // –∑–Ω–∞–π–¥–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é. –ñ–æ–¥–Ω–∏—Ö —Å–∫–ª–∞–¥–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ.

                    echo "üìù Applying Kubernetes manifests..."
                    sh 'kubectl apply -f k8s/deployment.yaml'
                    sh 'kubectl apply -f k8s/service.yaml'

                    echo "‚ôªÔ∏è Triggering a rollout restart to ensure the latest image is used..."
                    sh "kubectl rollout restart deployment/${K8S_DEPLOYMENT_NAME}"

                    echo "‚è≥ Waiting for deployment to complete..."
                    timeout(time: 5, unit: 'MINUTES') {
                        sh "kubectl rollout status deployment/${K8S_DEPLOYMENT_NAME}"
                    }

                    echo "‚úÖ Application deployed successfully to Minikube."
                    echo "üîó Getting service URL..."
                    sh "minikube service ${K8S_SERVICE_NAME} --url"
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ CI/CD Pipeline successfully completed! Application is deployed.'
        }
        failure {
            echo 'üö® CI/CD Pipeline failed! Check above logs for details.'
        }
    }
}