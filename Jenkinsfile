pipeline {
    agent any
    environment {
        IMAGE_NAME = "pz41-app"
        IMAGE_TAG = "latest" // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ latest, –æ—Å–∫—ñ–ª—å–∫–∏ –≤ Minikube –±—É–¥–µ –ª–æ–∫–∞–ª—å–Ω–∏–π –æ–±—Ä–∞–∑
        K8S_DEPLOYMENT_NAME = "pz41-app-deployment"
        K8S_SERVICE_NAME = "pz41-app-service"
        // DOCKERHUB_CREDENTIALS_ID = 'dockerhub-credentials' // –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —è–∫—â–æ –Ω–µ –ø—É—à–∏–º–æ –≤ Docker Hub
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Fetching code from repository...'
                checkout scm
                echo '‚úÖ Code checkout completed.'
            }
            post {
                failure {
                    echo '‚ùå Checkout failed! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ Git.'
                }
            }
        }

        stage('Build') {
            steps {
                echo 'üîß Building the project (compile + package)...'
                sh 'chmod +x ./mvnw'
                echo 'üì¶ Packaging the application...'
                sh './mvnw clean package -DskipTests'
            }
            post {
                success {
                    echo '‚úÖ Build and packaging successful.'
                }
                failure {
                    echo '‚ùå Build failed! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥ –∑–±—ñ—Ä–∫–∏ Maven.'
                }
                unstable {
                    echo '‚ö†Ô∏è Build completed –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ Maven.'
                }
            }
        }

        stage('Test') {
            steps {
                echo 'üß™ Running tests...'
                sh './mvnw test'
            }
            post {
                always {
                    echo 'üìÅ Archiving JUnit test results...'
                    junit 'target/surefire-reports/*.xml'
                }
                success {
                    echo '‚úÖ Tests passed successfully.'
                }
                failure {
                    echo '‚ùå –¢–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.'
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                echo 'üóÇ Archiving the JAR file...'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

stage('Build Docker Image') {
            steps {
                script {
                    if (!fileExists('Dockerfile')) {
                        error "‚ùå Dockerfile –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–æ–±–æ—á—ñ–π –¥–∏—Ä–µ—Ç–æ—Ä—ñ—ó!"
                    }
                    echo 'üìã Dockerfile –∑–Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ...'

                    echo 'üìã –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–º—ñ—Å—Ç —Ä–æ–±–æ—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó:'
                    sh 'ls -la $WORKSPACE'
                    echo 'üìã –í–∏–≤—ñ–¥ Dockerfile:'
                    sh 'cat $WORKSPACE/Dockerfile'
                    echo 'üìã –í–º—ñ—Å—Ç –ø–∞–ø–∫–∏ target:'
                    sh 'ls -la $WORKSPACE/target'

                    // **–í–ê–ñ–õ–ò–í–û:** –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Docker CLI –Ω–∞ Minikube Daemon
                    echo "‚öôÔ∏è –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Docker –Ω–∞ Minikube –¥–µ–º–æ–Ω..."
                    // –û–±'—î–¥–Ω—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ç–∞ –ø–æ–¥–∞–ª—å—à—ñ Docker –∫–æ–º–∞–Ω–¥–∏ –≤ –æ–¥–∏–Ω sh –±–ª–æ–∫
                    sh """
                        eval $(minikube -p minikube docker-env)
                        echo "DOCKER_HOST: \${DOCKER_HOST}"
                        echo "DOCKER_CERT_PATH: \${DOCKER_CERT_PATH}"
                        echo "DOCKER_TLS_VERIFY: \${DOCKER_TLS_VERIFY}"

                        echo "üê≥ Building Docker image ${IMAGE_NAME}:${IMAGE_TAG}..."
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                        echo "‚úÖ Docker image ${IMAGE_NAME}:${IMAGE_TAG} built successfully."
                    """
                }
            }
        }
        // Stage 'Push Docker Image' –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∞–±–æ –∑—Ä–æ–±–ª–µ–Ω–∏–π —É–º–æ–≤–Ω–∏–º,
        // —è–∫—â–æ –≤–∏ –ù–ï –ø–ª–∞–Ω—É—î—Ç–µ –ø—É—à–∏—Ç–∏ –æ–±—Ä–∞–∑ –≤ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π —Ä–µ—î—Å—Ç—Ä –¥–ª—è Minikube.
        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —á–µ—Ä–µ–∑ `minikube docker-env` —Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ.
        /*
        stage('Push Docker Image') {
            when {
                expression { return env.IMAGE_TAG != 'latest' } // Push only if not 'latest' or for specific tags
            }
            steps {
                script {
                    echo "üöÄ Pushing Docker image ${IMAGE_NAME}:${IMAGE_TAG} to DockerHub..."
                    try {
                        docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS_ID) {
                            docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                        }
                        echo "‚úÖ Docker image pushed successfully."
                    } catch (e) {
                        echo "‚ùå Failed to push Docker image: ${e.getMessage()}"
                        error "Docker push failed"
                    }
                }
            }
        }
        */

        stage('Deploy to Minikube') {
            steps {
                script {
                    echo "‚öôÔ∏è –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Kubectl –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç Minikube..."
                    sh 'kubectl config use minikube' // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ kubectl –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    sh 'kubectl config current-context' // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

                    def kubectlVersion = sh(script: "kubectl version --client --short", returnStdout: true).trim()
                    echo "‚ÑπÔ∏è Kubectl version: ${kubectlVersion}"

                    def nodes = sh(script: "kubectl get nodes --no-headers | wc -l", returnStdout: true).trim()
                    if (nodes == '0') {
                        error "‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –Ω–æ–¥ —É –∫–ª–∞—Å—Ç–µ—Ä—ñ Kubernetes! –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ Minikube –∑–∞–ø—É—â–µ–Ω–æ."
                    }
                    echo "üì¶ Deploying to Minikube..."
                    try {
                        // –û—Å–∫—ñ–ª—å–∫–∏ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ :latest —ñ –æ—á—ñ–∫—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –æ–±—Ä–∞–∑,
                        // –Ω–∞–π–∫—Ä–∞—â–∏–π —Å–ø–æ—Å—ñ–± –∑–º—É—Å–∏—Ç–∏ Minikube –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Pods - —Ü–µ rollout restart.
                        // –Ø–∫—â–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ IMAGE_TAG = "${env.BUILD_ID}" —ñ –æ–Ω–æ–≤–ª—é–≤–∞–ª–∏ deployment.yaml,
                        // —Ç–æ —Ç–æ–¥—ñ `kubectl set image` –±—É–≤ –±–∏ –±—ñ–ª—å—à –¥–æ—Ä–µ—á–Ω–∏–º.
                        echo "üìù Applying Kubernetes manifests..."
                        sh 'kubectl apply -f k8s/deployment.yaml'
                        sh 'kubectl apply -f k8s/service.yaml'

                        echo "‚ôªÔ∏è Rolling restart of deployment ${K8S_DEPLOYMENT_NAME}..."
                        sh "kubectl rollout restart deployment/${K8S_DEPLOYMENT_NAME} --namespace=default"


                        echo "‚è≥ Waiting for deployment rollout to complete..."
                        timeout(time: 5, unit: 'MINUTES') {
                            sh "kubectl rollout status deployment/${K8S_DEPLOYMENT_NAME} --namespace=default --watch=true"
                        }

                        echo "‚úÖ Application deployed successfully to Minikube."

                        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è URL —Å–µ—Ä–≤—ñ—Å—É
                        echo "üîó –°–µ—Ä–≤—ñ—Å –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ URL:"
                        sh "minikube service ${K8S_SERVICE_NAME} --url"

                    } catch (e) {
                        echo "‚ùå Failed to deploy to Minikube: ${e.getMessage()}"
                        error "Minikube deployment failed"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ CI/CD Pipeline successfully completed! Application is deployed.'
        }
        failure {
            echo 'üö® CI/CD Pipeline failed! Check above logs for details.'
        }
        always {
            echo 'üîö Pipeline finished.'
        }
    }
}